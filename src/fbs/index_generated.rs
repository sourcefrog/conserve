// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod conserve {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod index {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_KIND: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_KIND: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_KIND: [Kind; 3] = [
  Kind::File,
  Kind::Dir,
  Kind::Symlink,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Kind(pub i8);
#[allow(non_upper_case_globals)]
impl Kind {
  pub const File: Self = Self(0);
  pub const Dir: Self = Self(1);
  pub const Symlink: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::File,
    Self::Dir,
    Self::Symlink,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::File => Some("File"),
      Self::Dir => Some("Dir"),
      Self::Symlink => Some("Symlink"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Kind {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Kind {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Kind {
    type Output = Kind;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Kind {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Kind {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Kind {}
// struct UnixMode, aligned to 2
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct UnixMode(pub [u8; 2]);
impl Default for UnixMode { 
  fn default() -> Self { 
    Self([0; 2])
  }
}
impl core::fmt::Debug for UnixMode {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("UnixMode")
      .field("mode", &self.mode())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for UnixMode {}
impl<'a> flatbuffers::Follow<'a> for UnixMode {
  type Inner = &'a UnixMode;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a UnixMode>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a UnixMode {
  type Inner = &'a UnixMode;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<UnixMode>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for UnixMode {
    type Output = UnixMode;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const UnixMode as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for UnixMode {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> UnixMode {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    mode: u16,
  ) -> Self {
    let mut s = Self([0; 2]);
    s.set_mode(mode);
    s
  }

  pub fn mode(&self) -> u16 {
    let mut mem = core::mem::MaybeUninit::<<u16 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_mode(&mut self, x: u16) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum AddrOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Addr<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Addr<'a> {
  type Inner = Addr<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Addr<'a> {
  pub const VT_HASH: flatbuffers::VOffsetT = 4;
  pub const VT_START: flatbuffers::VOffsetT = 6;
  pub const VT_LEN: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Addr { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AddrArgs<'args>
  ) -> flatbuffers::WIPOffset<Addr<'bldr>> {
    let mut builder = AddrBuilder::new(_fbb);
    builder.add_len(args.len);
    builder.add_start(args.start);
    if let Some(x) = args.hash { builder.add_hash(x); }
    builder.finish()
  }


  #[inline]
  pub fn hash(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Addr::VT_HASH, None)}
  }
  #[inline]
  pub fn start(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Addr::VT_START, Some(0)).unwrap()}
  }
  #[inline]
  pub fn len(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Addr::VT_LEN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Addr<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("hash", Self::VT_HASH, false)?
     .visit_field::<u64>("start", Self::VT_START, false)?
     .visit_field::<u64>("len", Self::VT_LEN, false)?
     .finish();
    Ok(())
  }
}
pub struct AddrArgs<'a> {
    pub hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub start: u64,
    pub len: u64,
}
impl<'a> Default for AddrArgs<'a> {
  #[inline]
  fn default() -> Self {
    AddrArgs {
      hash: None,
      start: 0,
      len: 0,
    }
  }
}

pub struct AddrBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AddrBuilder<'a, 'b> {
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Addr::VT_HASH, hash);
  }
  #[inline]
  pub fn add_start(&mut self, start: u64) {
    self.fbb_.push_slot::<u64>(Addr::VT_START, start, 0);
  }
  #[inline]
  pub fn add_len(&mut self, len: u64) {
    self.fbb_.push_slot::<u64>(Addr::VT_LEN, len, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AddrBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AddrBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Addr<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Addr<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Addr");
      ds.field("hash", &self.hash());
      ds.field("start", &self.start());
      ds.field("len", &self.len());
      ds.finish()
  }
}
pub enum EntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Entry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entry<'a> {
  type Inner = Entry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Entry<'a> {
  pub const VT_APATH: flatbuffers::VOffsetT = 4;
  pub const VT_KIND: flatbuffers::VOffsetT = 6;
  pub const VT_TARGET: flatbuffers::VOffsetT = 8;
  pub const VT_MTIME: flatbuffers::VOffsetT = 10;
  pub const VT_MTIME_NANOS: flatbuffers::VOffsetT = 12;
  pub const VT_UNIX_MODE: flatbuffers::VOffsetT = 14;
  pub const VT_ADDRS: flatbuffers::VOffsetT = 16;
  pub const VT_USER: flatbuffers::VOffsetT = 18;
  pub const VT_GROUP: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Entry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EntryArgs<'args>
  ) -> flatbuffers::WIPOffset<Entry<'bldr>> {
    let mut builder = EntryBuilder::new(_fbb);
    builder.add_mtime(args.mtime);
    if let Some(x) = args.group { builder.add_group(x); }
    if let Some(x) = args.user { builder.add_user(x); }
    if let Some(x) = args.addrs { builder.add_addrs(x); }
    if let Some(x) = args.unix_mode { builder.add_unix_mode(x); }
    builder.add_mtime_nanos(args.mtime_nanos);
    if let Some(x) = args.target { builder.add_target(x); }
    if let Some(x) = args.apath { builder.add_apath(x); }
    builder.add_kind(args.kind);
    builder.finish()
  }


  #[inline]
  pub fn apath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_APATH, None)}
  }
  #[inline]
  pub fn kind(&self) -> Kind {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Kind>(Entry::VT_KIND, Some(Kind::File)).unwrap()}
  }
  #[inline]
  pub fn target(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_TARGET, None)}
  }
  #[inline]
  pub fn mtime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(Entry::VT_MTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn mtime_nanos(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Entry::VT_MTIME_NANOS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unix_mode(&self) -> Option<&'a UnixMode> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<UnixMode>(Entry::VT_UNIX_MODE, None)}
  }
  #[inline]
  pub fn addrs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Addr<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Addr>>>>(Entry::VT_ADDRS, None)}
  }
  #[inline]
  pub fn user(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_USER, None)}
  }
  #[inline]
  pub fn group(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_GROUP, None)}
  }
}

impl flatbuffers::Verifiable for Entry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apath", Self::VT_APATH, false)?
     .visit_field::<Kind>("kind", Self::VT_KIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("target", Self::VT_TARGET, false)?
     .visit_field::<i64>("mtime", Self::VT_MTIME, false)?
     .visit_field::<u32>("mtime_nanos", Self::VT_MTIME_NANOS, false)?
     .visit_field::<UnixMode>("unix_mode", Self::VT_UNIX_MODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Addr>>>>("addrs", Self::VT_ADDRS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user", Self::VT_USER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("group", Self::VT_GROUP, false)?
     .finish();
    Ok(())
  }
}
pub struct EntryArgs<'a> {
    pub apath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub kind: Kind,
    pub target: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mtime: i64,
    pub mtime_nanos: u32,
    pub unix_mode: Option<&'a UnixMode>,
    pub addrs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Addr<'a>>>>>,
    pub user: Option<flatbuffers::WIPOffset<&'a str>>,
    pub group: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntryArgs {
      apath: None,
      kind: Kind::File,
      target: None,
      mtime: 0,
      mtime_nanos: 0,
      unix_mode: None,
      addrs: None,
      user: None,
      group: None,
    }
  }
}

pub struct EntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_apath(&mut self, apath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_APATH, apath);
  }
  #[inline]
  pub fn add_kind(&mut self, kind: Kind) {
    self.fbb_.push_slot::<Kind>(Entry::VT_KIND, kind, Kind::File);
  }
  #[inline]
  pub fn add_target(&mut self, target: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_TARGET, target);
  }
  #[inline]
  pub fn add_mtime(&mut self, mtime: i64) {
    self.fbb_.push_slot::<i64>(Entry::VT_MTIME, mtime, 0);
  }
  #[inline]
  pub fn add_mtime_nanos(&mut self, mtime_nanos: u32) {
    self.fbb_.push_slot::<u32>(Entry::VT_MTIME_NANOS, mtime_nanos, 0);
  }
  #[inline]
  pub fn add_unix_mode(&mut self, unix_mode: &UnixMode) {
    self.fbb_.push_slot_always::<&UnixMode>(Entry::VT_UNIX_MODE, unix_mode);
  }
  #[inline]
  pub fn add_addrs(&mut self, addrs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Addr<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_ADDRS, addrs);
  }
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_USER, user);
  }
  #[inline]
  pub fn add_group(&mut self, group: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_GROUP, group);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Entry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Entry");
      ds.field("apath", &self.apath());
      ds.field("kind", &self.kind());
      ds.field("target", &self.target());
      ds.field("mtime", &self.mtime());
      ds.field("mtime_nanos", &self.mtime_nanos());
      ds.field("unix_mode", &self.unix_mode());
      ds.field("addrs", &self.addrs());
      ds.field("user", &self.user());
      ds.field("group", &self.group());
      ds.finish()
  }
}
pub enum IndexOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Index<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Index<'a> {
  type Inner = Index<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Index<'a> {
  pub const VT_ENTRIES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Index { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args IndexArgs<'args>
  ) -> flatbuffers::WIPOffset<Index<'bldr>> {
    let mut builder = IndexBuilder::new(_fbb);
    if let Some(x) = args.entries { builder.add_entries(x); }
    builder.finish()
  }


  #[inline]
  pub fn entries(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry>>>>(Index::VT_ENTRIES, None)}
  }
}

impl flatbuffers::Verifiable for Index<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Entry>>>>("entries", Self::VT_ENTRIES, false)?
     .finish();
    Ok(())
  }
}
pub struct IndexArgs<'a> {
    pub entries: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry<'a>>>>>,
}
impl<'a> Default for IndexArgs<'a> {
  #[inline]
  fn default() -> Self {
    IndexArgs {
      entries: None,
    }
  }
}

pub struct IndexBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> IndexBuilder<'a, 'b> {
  #[inline]
  pub fn add_entries(&mut self, entries: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Entry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Index::VT_ENTRIES, entries);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> IndexBuilder<'a, 'b> {
    let start = _fbb.start_table();
    IndexBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Index<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Index<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Index");
      ds.field("entries", &self.entries());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Index`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_index_unchecked`.
pub fn root_as_index(buf: &[u8]) -> Result<Index, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Index>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Index` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_index_unchecked`.
pub fn size_prefixed_root_as_index(buf: &[u8]) -> Result<Index, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Index>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Index` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_index_unchecked`.
pub fn root_as_index_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Index<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Index<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Index` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_index_unchecked`.
pub fn size_prefixed_root_as_index_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Index<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Index<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Index and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Index`.
pub unsafe fn root_as_index_unchecked(buf: &[u8]) -> Index {
  flatbuffers::root_unchecked::<Index>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Index and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Index`.
pub unsafe fn size_prefixed_root_as_index_unchecked(buf: &[u8]) -> Index {
  flatbuffers::size_prefixed_root_unchecked::<Index>(buf)
}
#[inline]
pub fn finish_index_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Index<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_index_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Index<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Index
}  // pub mod Conserve

